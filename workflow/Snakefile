##### libraries #####
import os
import sys
import pandas as pd
from snakemake.utils import min_version

##### utility functions #####
def get_sample_paths(wildcards):
    return [annot.loc[wildcards.sample,'path'], annot.loc[wildcards.sample,'metadata']]

min_version("6.0.3")

SDIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))
shell.prefix(f"set -eo pipefail;")

##### container image #####
# containerized: "docker://sreichl/..."

##### setup report #####
report: os.path.join("report", "workflow.rst")

##### load config and sample annotation sheets #####
configfile: os.path.join("config", "config.yaml")

annot = pd.read_csv(config['sample_annotation'], index_col='sample_name')

data_splits = ['merged']
extra_splits = []
if config["split_by"] is not None:
    for split in config["split_by"]:
        if split=='batch':
            data_splits.extend(config["split_by"][split])
        else:
            extra_splits.extend([split+"_"+value for value in config["split_by"][split]])
data_splits = data_splits + extra_splits

# TEMP_DIR = config.pop("tempdir", "temp")
# if TEMP_DIR != "temp":
#     if os.path.exists("temp"):
#         if os.path.islink("temp") and os.path.realpath("temp") == os.path.realpath(
#             TEMP_DIR
#         ):
#             print("The temp dir has already been linked.")
#         else:
#             sys.exit("temp/ already in use, please move it before running.")
#     else:
#         shell("ln -s {TEMP_DIR} temp")

# necessary to avoid ambiguities between rule prepare (pre merge) and split (post merge)
ruleorder: prepare > split
    
all_steps = ['RAW','FILTERED','NORMALIZED','CORRECTED']
    
if config["stop_after"]=="CORRECTED":
    plot_steps = ["NORMALIZED","CORRECTED"]
    metadata_plot_steps = all_steps[:all_steps.index(config["stop_after"])]
elif config["stop_after"]=="NORMALIZED":
    plot_steps = ["NORMALIZED"]
    metadata_plot_steps = all_steps[:all_steps.index(config["stop_after"])+1]
else:
    plot_steps = []
    metadata_plot_steps = all_steps[:all_steps.index(config["stop_after"])+1]

rule all:
    input:
        final_objects = expand(os.path.join(config["result_path"],'{split}','counts','{step}_object.rds'), 
                               split=data_splits, 
                               step=config["stop_after"]),
        metadata_plots = expand(os.path.join(config["result_path"],'{split}','counts','plots','{step}_metadata_{datatype}.png'),
                             split=data_splits,
                             step=metadata_plot_steps,
                             datatype=['numerical','categorical','types']
                            ),
        normalized_plots = expand(os.path.join(config["result_path"],'{split}','counts','plots','NORMALIZED_{plot_type}_{category}_{gene_list}.png'), 
                       split=data_splits,
                       plot_type=['ridge_plot','violin_plot','dot_plot','heatmap'], 
                       category=config["vis_categories"],
                       gene_list=list(config["vis_gene_lists"].keys())
                      ) if (config["stop_after"]=="CORRECTED")or(config["stop_after"]=="NORMALIZED") else None,
        corrected_plots = expand(os.path.join(config["result_path"],'{split}','counts','plots','CORRECTED_{plot_type}_{category}_{gene_list}.png'), 
                       split=data_splits,
                       plot_type=['ridge_plot','violin_plot','heatmap'], 
                       category=config["vis_categories"],
                       gene_list=list(config["vis_gene_lists"].keys())
                      ) if (config["stop_after"]=="CORRECTED") else None,
        envs = report(expand(os.path.join(config["result_path"],'envs','{env}.yaml'),env=['seurat','inspectdf']), caption="report/software.rst", category="Software", subcategory=config["project_name"]),
        gene_lists = report(set(list(config["module_gene_lists"].values())+list(config["vis_gene_lists"].values())), caption="report/gene_lists.rst", category="Configuration", subcategory=config["project_name"]),
        configs = report([os.path.join("config", "config.yaml"),config["sample_annotation"]], caption="report/configs.rst", category="Configuration", subcategory=config["project_name"]),
    resources:
        mem=config.get("mem", "16G"),
    threads: config.get("threads", 1)
    log:
        os.path.join("logs","rules","all.log"),
    params:
        partition=config.get("partition"),

        
##### load rules #####
include: os.path.join("rules", "process.smk")
include: os.path.join("rules", "normalize_correct_score.smk")
include: os.path.join("rules", "visualize.smk")
include: os.path.join("rules", "envs_export.smk")
